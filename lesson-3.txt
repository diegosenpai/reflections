
When would you want to use a remote repository rather than keeping all your work
local?
Cuando deseo trabajar con varias personas ubicadas remotamente. Es decir cuando tengo varios contribuyentes a mi proyecto

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

 Porque pueden existir casos en los que los cambios introducidos en el repositorio remoto no sean los definitivos
y generen ruido en mi repositorio local.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
 
 Fork es una repositorio clonado que se crea en mi cuenta de github a partir de un repositorio de un tercero. Me permite trabajar sobre modificaciones en el repositorio sin afectar al propietario del mismo. Clone me permite obtener una copia local de un repositorio y me permite trabajar directamente y colaborar
 con el dueno del repositorio. Branch es un commit con una etiqueta y me permite realizar modificaciones sobre un repositorio de forma local sin afectar a la rama principal de desarrollo.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Es util porque podria utilizarse para actualizar nuestro repositorio local con los cambios introducidos previamente y tener una copia local lo más parecida al contenido del repositorio remoto.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

 Sin utilizar un CVS, la pregunta se complica, porque utilizaría un servidor FTP en donde todos los miembros del equipo podriamos acceder al código, eso sería lo fácil. Lo complejo sería resolver los conflictos que se presentan en los archivos. Alguien tendría que estar a cargo de eso. Y aún más complicado sería poder llevar un control de los cambios realizados a fin de porder ver su historia.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

Porque puedo trabajar en nuevas características sin afectar al arbol principal que es el que comunmente contiene la versión que se encuentra en ejecución. De esta forma se pueden probar estas características de forma segura. Otra ventaja es que se pueden corregir errores que se presenten en la rama princial o el código en ejecución sin que se afecte las nuevas características del branch.
